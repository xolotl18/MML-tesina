Wednesday = wday_3,
Thursday = wday_4,
Friday = wday_5,
Saturday = wday_6,
Sunday = wday_0,
Weekend = wend
)
head(bikes.dummies)
control <- rfeControl(functions = rfFuncs, #random forest, linear model implementation has a bug
method = "cv", #cross validation
number = 1 # 2-fold cross validation
)
#define attribute variables and response variable
x <- subset(bikes.dummies, select = -c(Count, January, February, March, April, May, June, July, August, September, October, November, December))
y <- log(bikes.dummies$Count+1)
#randomly split the dataset into train and test sets
set.seed(3456)
inTrain <- createDataPartition(y, p= .75, list = FALSE)
x_train <- x[inTrain, ]
x_test  <- x[-inTrain, ]
y_train <- y[inTrain]
y_test  <- y[-inTrain]
y_train <- as.matrix(y_train)
result_rfe <- rfe(x = x_train,
y = y_train,
sizes = c(1:12, 25),
rfeControl = control,
verbose=TRUE,
allowParallel=TRUE
)
control <- rfeControl(functions = rfFuncs, #random forest, linear model implementation has a bug
method = "cv", #cross validation
number = 1 # 2-fold cross validation
)
#define attribute variables and response variable
x <- subset(bikes.dummies, select = -c(Count, January, February, March, April, May, June, July, August, September, October, November, December))
head(x)
y <- log(bikes.dummies$Count+1)
#randomly split the dataset into train and test sets
set.seed(3456)
inTrain <- createDataPartition(y, p= .75, list = FALSE)
x_train <- x[inTrain, ]
x_test  <- x[-inTrain, ]
y_train <- y[inTrain]
y_test  <- y[-inTrain]
y_train <- as.matrix(y_train)
result_rfe <- rfe(x = x_train,
y = y_train,
sizes = c(1:12, 25),
rfeControl = control,
verbose=TRUE,
allowParallel=TRUE
)
control <- rfeControl(functions = rfFuncs, #random forest, linear model implementation has a bug
method = "cv", #cross validation
number = 1 # 2-fold cross validation
)
#define attribute variables and response variable
x <- subset(bikes.dummies, select = -c(Count, January, February, March, April, May, June, July, August, September, October, November, December))
y <- log(bikes.dummies$Count+1)
#randomly split the dataset into train and test sets
set.seed(3456)
inTrain <- createDataPartition(y, p= .75, list = FALSE)
x_train <- x[inTrain, ]
x_test  <- x[-inTrain, ]
y_train <- y[inTrain]
y_test  <- y[-inTrain]
head(x_train)
y_train <- as.matrix(y_train)
result_rfe <- rfe(x = x_train,
y = y_train,
sizes = c(1:12, 25),
rfeControl = control,
verbose=TRUE,
allowParallel=TRUE
)
control <- rfeControl(functions = rfFuncs, #random forest, linear model implementation has a bug
method = "cv", #cross validation
number = 1 # 2-fold cross validation
)
#define attribute variables and response variable
x <- subset(bikes.dummies, select = -c(Count, January, February, March, April, May, June, July, August, September, October, November, December))
y <- log(bikes.dummies$Count+1)
#randomly split the dataset into train and test sets
set.seed(3456)
inTrain <- createDataPartition(y, p= .75, list = FALSE)
x_train <- x[inTrain, ]
x_test  <- x[-inTrain, ]
y_train <- y[inTrain]
y_test  <- y[-inTrain]
y_train <- as.matrix(y_train)
result_rfe <- rfe(x = x_train,
y = y_train,
sizes = c(1, 2, 3, 4, 5, 6, 7, 8 ,9, 10, 11, 12, 25),
rfeControl = control,
verbose=TRUE,
allowParallel=TRUE
)
control <- rfeControl(functions = rfFuncs, #random forest, linear model implementation has a bug
method = "cv", #cross validation
number = 1 # 2-fold cross validation
)
#define attribute variables and response variable
x <- subset(bikes.dummies, select = -c(Count, January, February, March, April, May, June, July, August, September, October, November, December))
y <- log(bikes.dummies$Count+1)
#randomly split the dataset into train and test sets
set.seed(3456)
inTrain <- createDataPartition(y, p= .75, list = FALSE)
x_train <- x[inTrain, ]
x_test  <- x[-inTrain, ]
y_train <- y[inTrain]
y_test  <- y[-inTrain]
y_train <- as.matrix(y_train)
result_rfe <- rfe(x = x_train,
y = y_train,
sizes = c(1:25),
rfeControl = control,
verbose=TRUE,
allowParallel=TRUE
)
control <- rfeControl(functions = rfFuncs, #random forest, linear model implementation has a bug
method = "cv", #cross validation
number = 2 # 2-fold cross validation
)
#define attribute variables and response variable
x <- subset(bikes.dummies, select = -c(Count, January, February, March, April, May, June, July, August, September, October, November, December))
y <- log(bikes.dummies$Count+1)
#randomly split the dataset into train and test sets
set.seed(3456)
inTrain <- createDataPartition(y, p= .75, list = FALSE)
x_train <- x[inTrain, ]
x_test  <- x[-inTrain, ]
y_train <- y[inTrain]
y_test  <- y[-inTrain]
y_train <- as.matrix(y_train)
result_rfe <- rfe(x = x_train,
y = y_train,
sizes = c(1:25),
rfeControl = control,
verbose=TRUE,
allowParallel=TRUE
)
knitr::opts_chunk$set(echo = TRUE, fig.height = 12, fig.width = 16)
library(tidyverse)
library(ggplot2)
library(psych)
library(ggpubr)
library(car)
library(MASS)
library(DataExplorer)
library(fastDummies)
library(caret)
library(tree)
library(randomForest)
library(gbm)
library(kableExtra)
attributes.df <- data.frame(
Attributes = c(
"Date",
"Rented Bike Count",
"Hour",
"Temperature",
"Humidity",
"Windspeed",
"Visibility",
"Dew Point Temperature",
"Solar Radiation",
"Rainfall",
"Snowfall",
"Seasons",
"Holiday",
"Functional Day"
),
Abbreviation = c(
"Date",
"Count",
"Hour",
"Temp",
"Hum",
"Wind",
"Visb",
"Dew",
"Solar",
"Rain",
"Snow",
"Season",
"Holiday",
"Func"
),
Type =c(
"year-month-day",
"Continuous",
"Continuous",
"Continuous",
"Continuous",
"Continuous",
"Continuous",
"Continuous",
"Continuous",
"Continuous",
"Continuous",
"Categorical",
"Categorical",
"Categorical"
),
Measurement =c(
"-",
"0, 1, 2, ..., 3556",
"0, 1, 2, ..., 23",
"°C",
"%",
"m/s",
"10m",
"°C",
"MJ/m2",
"mm",
"cm",
"Autumn, Spring, Summer, Winter",
"Holiday, No Holiday",
"Yes, No"
)
)
attributes.df %>%
kbl(caption = "Description of the attributes", booktabs = TRUE) %>%
kable_styling(full_width = T)
bikes.old <- read.csv(file="C:\\Users\\Giacomo\\Desktop\\mml\\SeoulBikeData.csv")
head(bikes.old)
bikes.old$wday <- as.POSIXlt(bikes.old$Date, format = '%d/%m/%Y')$wday
bikes <- bikes.old %>%
separate(Date, sep="/", into = c("day", "month", "year"))
head(bikes)
to_wend <- function(wday){
if(wday==6 | wday==0){
wend = 1
} else {
wend = 0
}
}
bikes$wend = sapply(bikes$wday, to_wend)
head(bikes)
resp <- ggplot(data=bikes) +
geom_histogram(aes(Count), binwidth = 30) +
theme(text = element_text(size=20))+
xlab("bike count")
resp_log <- ggplot(data=bikes) +
geom_histogram(aes(log(Count+1)), binwidth = 0.1) +
theme(text = element_text(size=20))+
xlab("log bike count")
resp_qq <- ggplot(data=bikes, aes(sample = Count))+
geom_qq(alpha = 0.5, size=0.8) +
theme(text = element_text(size=20))+
stat_qq_line(color="red", alpha=0.7, size=0.5, linetype=2)
resp_qq_log <- ggplot(data=bikes, aes(sample = log(Count+1)))+
geom_qq(alpha = 0.5, size=0.8) +
theme(text = element_text(size=20))+
stat_qq_line(color="red", alpha=0.7, size=0.5, linetype=2)
ggarrange(resp, resp_log, resp_qq, resp_qq_log, ncol = 2, nrow=2)
#check out zero values of count
bikes.zero <-subset(bikes, bikes$Count==0)
bikes.nofunc <-subset(bikes, bikes$Func=="No")
bikes.nfzero <- subset(bikes.zero, bikes.zero$Func=="No")
zero.df <- data.frame(
Event = c(
"Zero Values of Count",
"Functional Day : NO",
"Count=0 AND Func=NO"
),
Number = c(
nrow(bikes.zero),
nrow(bikes.nofunc),
nrow(bikes.nfzero)
)
)
zero.df %>%
kbl(caption = "Occurrence of Zero Values in relation to Functional Day attribute", booktabs = TRUE) %>%
kable_styling(full_width = T)
bikes.quant = subset(bikes.old, select=-c(Date, Seasons, Holiday, Func, wday))
pairs.panels(bikes.quant,
method = "pearson",
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE, # show correlation ellipses
lm=TRUE #Plot the linear fit rather than the LOESS smoothed fits.
)
bikes.noday <- subset(bikes, select=-c(day))
plot_intro(bikes)
plot_bar(bikes)
plot_correlation(bikes.noday)
means <- aggregate(Count ~ Hour, bikes, mean)
ggplot(means, aes(x=Hour, y = Count))+
theme(text = element_text(size=20))+
geom_line(size=1.3, colour="92") + geom_point(size=4, colour="92")
bikes17 <-subset(bikes, bikes$year=="2017")
bikes18 <-subset(bikes, bikes$year=="2018")
means17 <- aggregate(Count ~ Hour, bikes17, mean)
means18 <- aggregate(Count ~ Hour, bikes18, mean)
means18$year <- "2018"
means17$year<-"2017"
means_year <- rbind(means17, means18)
ggplot(means_year, aes(x=Hour, y = Count, colour = year))+
theme(text = element_text(size=20))+
geom_line(size=1.3) + geom_point(size=4)
tot_year <- data.frame(tot, year)
bikes18_jan <-subset(bikes, bikes$year=="2018" & bikes$month=="01")
means18_jan <- aggregate(Count ~ Hour, bikes18_jan, mean)
means18_jan$year <- "2018"
means_y2 <- rbind(means17, means18_jan)
ggplot(means_y2, aes(x=Hour, y = Count, colour = year))+
theme(text = element_text(size=20))+
geom_line(size=1.3) + geom_point(size=4)
means_month <- aggregate(Count~month, bikes, mean)
ggplot(means_month, aes(x=month, y=Count, fill=month))+
geom_bar(stat="identity")+
theme(text = element_text(size=20))+
labs(y="Average Count", x="Month")
bikes.jan <-subset(bikes, bikes$month=="01")
bikes.feb <-subset(bikes, bikes$month=="02")
bikes.mar <-subset(bikes, bikes$month=="03")
bikes.apr <-subset(bikes, bikes$month=="04")
bikes.may <-subset(bikes, bikes$month=="05")
bikes.jun <-subset(bikes, bikes$month=="06")
bikes.jul <-subset(bikes, bikes$month=="07")
bikes.aug <-subset(bikes, bikes$month=="08")
bikes.sep <-subset(bikes, bikes$month=="09")
bikes.oct <-subset(bikes, bikes$month=="10")
bikes.nov <-subset(bikes, bikes$month=="11")
bikes.dec <-subset(bikes, bikes$month=="12")
means.jan <- aggregate(Count ~ Hour, bikes.jan, mean)
means.feb <- aggregate(Count ~ Hour, bikes.feb, mean)
means.mar <- aggregate(Count ~ Hour, bikes.mar, mean)
means.apr <- aggregate(Count ~ Hour, bikes.apr, mean)
means.may <- aggregate(Count ~ Hour, bikes.may, mean)
means.jun <- aggregate(Count ~ Hour, bikes.jun, mean)
means.jul <- aggregate(Count ~ Hour, bikes.jul, mean)
means.aug <- aggregate(Count ~ Hour, bikes.aug, mean)
means.sep <- aggregate(Count ~ Hour, bikes.sep, mean)
means.oct <- aggregate(Count ~ Hour, bikes.oct, mean)
means.nov <- aggregate(Count ~ Hour, bikes.nov, mean)
means.dec <- aggregate(Count ~ Hour, bikes.dec, mean)
means.jan$month <- "January"
means.feb$month <- "February"
means.mar$month <- "March"
means.apr$month <- "April"
means.may$month <- "May"
means.jun$month <- "June"
means.jul$month <- "July"
means.aug$month <- "August"
means.sep$month <- "September"
means.oct$month <- "October"
means.nov$month <- "November"
means.dec$month <- "December"
means_month <- rbind(means.jan, means.feb, means.mar, means.apr, means.may, means.jun, means.jul, means.aug, means.sep, means.oct, means.dec)
means_month$month <- factor(means_month$month, levels= c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"))
ggplot(means_month, aes(x=Hour, y = Count, colour = month))+
theme(text = element_text(size=20), legend.position = "right")+
geom_line(size=1.3) + geom_point(size=4)
bikes.winter <-subset(bikes, bikes$Seasons=="Winter")
bikes.spring <-subset(bikes, bikes$Seasons=="Spring")
bikes.summer <-subset(bikes, bikes$Seasons=="Summer")
bikes.autumn <-subset(bikes, bikes$Seasons=="Autumn")
means.winter <- aggregate(Count ~ Hour, bikes.winter, mean)
means.spring <- aggregate(Count ~ Hour, bikes.spring, mean)
means.summer <- aggregate(Count ~ Hour, bikes.summer, mean)
means.autumn <- aggregate(Count ~ Hour, bikes.autumn, mean)
means.winter$Seasons <- "Winter"
means.spring$Seasons <- "Spring"
means.summer$Seasons <- "Summer"
means.autumn$Seasons <- "Autumnr"
means_seasons <- rbind(means.winter, means.spring, means.summer, means.autumn)
ggplot(means_seasons, aes(x=Hour, y = Count, colour = Seasons))+
theme(text = element_text(size=20))+
geom_line(size=1.3) + geom_point(size=4)
bikes.wday <-subset(bikes, bikes$wend==0)
bikes.wend <-subset(bikes, bikes$wend==1)
means.wday <- aggregate(Count ~ Hour, bikes.wday, mean)
means.wend <- aggregate(Count ~ Hour, bikes.wend, mean)
means.wday$wend <- "week-day"
means.wend$wend <- "week-end"
means_wend <- rbind(means.wday, means.wend)
ggplot(means_wend, aes(x=Hour, y = Count, colour = wend))+
theme(text = element_text(size=20))+
geom_line(size=1.3) + geom_point(size=4)
bikes.log <- subset(bikes, select = -c(day))
#save categorical features as factors
bikes.log <- bikes.log %>%
mutate_at(c("month", "year", "Seasons", "Holiday", "Func", "wday", "wend"),
as.factor)
bikes.dummies <- dummy_cols(bikes.log,
select_columns = c("month", "year", "Seasons", "wday"),
remove_selected_columns = TRUE
)
#rename columns to better readability
bikes.dummies <- bikes.dummies %>%
rename(
Winter = Seasons_Winter,
Spring = Seasons_Spring,
Summer = Seasons_Summer,
Autumn = Seasons_Autumn,
January = month_01,
February = month_02,
March = month_03,
April = month_04,
May = month_05,
June = month_06,
July = month_07,
August = month_08,
September = month_09,
October = month_10,
November = month_11,
December = month_12,
Monday = wday_1,
Tuesday = wday_2,
Wednesday = wday_3,
Thursday = wday_4,
Friday = wday_5,
Saturday = wday_6,
Sunday = wday_0,
Weekend = wend
)
head(bikes.dummies)
control <- rfeControl(functions = rfFuncs, #random forest, linear model implementation has a bug
method = "cv", #cross validation
number = 2 # 2-fold cross validation
)
#define attribute variables and response variable
x <- subset(bikes.dummies, select = -c(Count, January, February, March, April, May, June, July, August, September, October, November, December))
y <- log(bikes.dummies$Count+1)
#randomly split the dataset into train and test sets
set.seed(3456)
inTrain <- createDataPartition(y, p= .75, list = FALSE)
x_train <- x[inTrain, ]
x_test  <- x[-inTrain, ]
y_train <- y[inTrain]
y_test  <- y[-inTrain]
y_train <- as.matrix(y_train)
result_rfe <- rfe(x = x_train,
y = y_train,
sizes = c(1:25),
rfeControl = control,
verbose=TRUE,
allowParallel=TRUE
)
print(result_rfe, row.names = FALSE)
size = 25
variables <- result_rfe$variables
var_set <- variables[variables$Variables==size, ]
var_set <- aggregate(var_set[, c("Overall")], list(var_set$var), mean)
var_order <- order(var_set[ , c("x")], decreasing = TRUE)[1:size]
var_importance <- var_set
var_importance$Variable <- as.data.frame(var_set[var_order, ])$Group.1
var_importance$Importance <- as.data.frame(var_set[var_order, ])$x
var_importance <- subset(var_importance, select = -c(Group.1, x))
print(var_importance)
ggplot(data = result_rfe)+
theme(text = element_text(size=20))+
geom_line(size=1.5, col="92")+
geom_point(size=4, col="92")
var_importance$Variable <- reorder(var_importance$Variable, -var_importance$Importance)
ggplot(data = var_importance, aes(x=Variable, y=Importance))+
geom_bar(stat="identity", fill = "92")+
theme(text = element_text(size=20))+
theme(axis.text.x=element_text(angle=75,hjust=1,vjust=1))
ggplot(data = result_rfe)+
theme(text = element_text(size=15))+
geom_line(size=1.5, col="92")+
geom_point(size=4, col="92")
var_importance$Variable <- reorder(var_importance$Variable, -var_importance$Importance)
ggplot(data = var_importance, aes(x=Variable, y=Importance))+
geom_bar(stat="identity", fill = "92")+
theme(text = element_text(size=15))+
theme(axis.text.x=element_text(angle=75,hjust=1,vjust=1))
var_importance$Variable <- reorder(var_importance$Variable, -var_importance$Importance)
ggplot(data = var_importance, aes(x=Variable, y=Importance))+
geom_bar(stat="identity", fill = "92")+
theme(text = element_text(size=15))+
theme(axis.text.x=element_text(angle=75,hjust=1,vjust=1))
control <- rfeControl(functions = rfFuncs, #random forest, linear model implementation has a bug
method = "cv", #cross validation
number = 2 # 2-fold cross validation
)
#define attribute variables and response variable
x <- subset(bikes.dummies, select = -c(Count, January, February, March, April, May, June, July, August, September, October, November, December))
y <- log(bikes.dummies$Count+1)
#randomly split the dataset into train and test sets
set.seed(3456)
inTrain <- createDataPartition(y, p= .75, list = FALSE)
x_train <- x[inTrain, ]
x_test  <- x[-inTrain, ]
y_train <- y[inTrain]
y_test  <- y[-inTrain]
y_train <- as.matrix(y_train)
result_rfe <- rfe(x = x_train,
y = y_train,
sizes = c(1:12, 14, 20, 25),
rfeControl = control,
verbose=TRUE,
allowParallel=TRUE
)
size = 25
variables <- result_rfe$variables
var_set <- variables[variables$Variables==size, ]
var_set <- aggregate(var_set[, c("Overall")], list(var_set$var), mean)
var_order <- order(var_set[ , c("x")], decreasing = TRUE)[1:size]
var_importance <- var_set
var_importance$Variable <- as.data.frame(var_set[var_order, ])$Group.1
var_importance$Importance <- as.data.frame(var_set[var_order, ])$x
var_importance <- subset(var_importance, select = -c(Group.1, x))
ggplot(data = result_rfe)+
theme(text = element_text(size=15))+
geom_line(size=1.5, col="92")+
geom_point(size=4, col="92")
knitr::opts_chunk$set(echo = TRUE, fig.height = 12, fig.width = 16)
